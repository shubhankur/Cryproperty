<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Property</title>
</head>

<body>
    <% var propertyId=property._id%>
        <h1>
            <%=property.title %>
        </h1>
        <ul>
            <li> Name: <%=property.title %>
            </li>
            <li> Price: <%=property.price %>
            </li>
            <li> Description: <%=property.description %>
            </li>
            <li> Location: <%=property.location %>
            </li>
            <li> Number of Fractions: <%=property.fractions %>
            </li>
            <li> Available Units: <%=property.available %>
            </li>
            <li> Rate: <%=property.price /property.fractions %>
            </li>
            <li> Phase: <%=property.phase %>
            </li>
        </ul>
        <div>
            <button id="buy"></button>
            <button id="sell"></button>
            <button id="bid"></button>
        </div>
        <br>
        <a href="/property/list">View all properties</a>
        <script>
            window.userWalletAddress = null
            var propertyId = "<%= property._id%>";
            const buyButton = document.getElementById('buy')
            const sellButton = document.getElementById('sell')
            const bidButton = document.getElementById('bid');
            bidButton.style.visibility = 'hidden';
            function toggleButton() {
                buyButton.style.visibility = 'hidden';
                sellButton.style.visibility = 'hidden';
                var phase = "<%= property.phase%>";
                if (phase === "1") {
                    bidButton.style.visibility = 'visible';
                }
                else {
                    buyButton.style.visibility = 'visible';
                    sellButton.style.visibility = 'visible';
                }
                if (!window.ethereum) {
                    buyButton.disabled = true;
                    sellButton.disabled = true;
                    window.alert("Metamask is not connected/installed");
                    return false
                }
                process();
            }

            async function process() {
                console.log("Processing")
                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })
                    .catch((e) => {
                        console.error(e.message)
                        return
                    })
                if (!accounts) { return }
                buyButton.disabled = false;
                sellButton.disabled = false;
                window.userWalletAddress = accounts[0];
                console.log(window.userWalletAddress);
                var a = document.createElement('a');
                var link = document.createTextNode('Buy');
                a.appendChild(link);
                a.href = `/buy?useraddress=${window.userWalletAddress}&&propertyId=${propertyId}`;
                buyButton.appendChild(a);
                var a2 = document.createElement('a');
                var link2 = document.createTextNode('Sell');
                a2.appendChild(link2);
                a2.href = `/sell?useraddress=${window.userWalletAddress}&&propertyId=${propertyId}`;
                sellButton.appendChild(a2);
                var a3 = document.createElement('a');
                var link3 = document.createTextNode('Bid');
                a3.appendChild(link3);
                a3.href = `/bid?useraddress=${window.userWalletAddress}&&propertyId=${propertyId}`;
                bidButton.appendChild(a3);
            }
            const buy = async () => {
                console.log("buying");
                let request = new XMLHttpRequest();
                const url = `/buy?useraddress=${window.userWalletAddress}`;
                request.open("GET", url, true);
                request.send();
            }
            window.addEventListener('DOMContentLoaded', () => {
                toggleButton()
            });
        </script>
</body>

</html>